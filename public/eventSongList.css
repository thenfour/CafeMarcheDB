.EventSongListValueEditor .columnName-name input,
.EventSongListValueViewer .columnName-name {
    font-size: 24px;
    font-weight: bold;
    text-transform: uppercase;
    margin-right: 20px;
    display: flex;
    align-items: center;
}


.EventSongListValueViewer .dragHandleIcon {
    padding: 6px;
    padding-right: 12px;
    opacity: 30%;
    font-size: 15px;
}

.EventSongListList.saving {
    opacity: 30%;
    cursor: wait;
}

.addNewSongListButton {
    margin: 14px;
}

.EventSongListValue .stats {
    margin: 2px;
}

.songListSongTable {
    border-bottom: 1px solid #ccc;
}


.songListSongTable .tr {
    display: flex;
    --deemphasized-color: #0004;
    /*
     interacts with the max-width:100% of the table to allow the comments field to wrap to the next line
     actually this is very ugly; cannot make wrapping cells to look nice. better to make cells wrap internally like the tag list
    */
    /* flex-wrap: wrap; */
}

.songListSongTable .tbody .tr {
    /* makes icons and things center vertically within cells; looks cleaner */
    align-items: center;
    /* songs get a unique color to search dupes */
    --song-hash-color: black;
}


.songListSongTable .td,
.songListSongTable .th {
    display: flex;
    justify-content: center;
    white-space: nowrap;
    margin: 2px 0;
    align-items: center;
    flex-shrink: 0;
}

.songListSongTable .th {
    font-weight: bold;
    background-color: #0001;
    color: #0005;
    border-bottom: 1px solid #0003;
    /* font-style: italic; */
}

.songListSongTable .td:hover {
    background-color: #8881;
}

.songListSongTable .td.dragHandle,
.songListSongTable .th.dragHandle {
    user-select: none;
    width: 30px;
}

.songListSongTable .td.songIndex,
.songListSongTable .th.songIndex {
    width: 44px;
}

.songListSongTable .td.songIndex {
    color: var(--deemphasized-color);
}

.songListSongTable .th.songIndex:hover {
    /* background-color: var(--general-interactable-bgcolor); */
    color: var(--general-interactable-bgcolor);
}

.songListSongTable .td.songIndex {
    font-family: var(--ff-mono);
}

.songListSongTable .td.icon,
.songListSongTable .th.icon {
    width: 30px;
}

.songListSongTable .tr.invalidItem .td.songIndex,
.songListSongTable .tr.invalidItem .td.dragHandle,
.songListSongTable .tr.invalidItem .td.icon {
    color: #0002;
}

.songListSongTable .tr.item {
    border-bottom: 1px dotted #0002;
    --song-hash-color: var(--primary-color);
}

.songListSongTable .tr.item.nodividers {
    border-bottom: 1px solid transparent;
}

/* make sure the item ABOVE a nodivider entry also doesn't put its border. */
.songListSongTable .tr.item:has(+.nodividers) {
    border-bottom: 1px solid transparent;
}

.songListSongTable .tr.item.type_divider .td.songName {
    font-style: italic;
    color: var(--color-foreground);
}

.songListSongTable .tr.item.type_divider,
.hatch {
    /* mimicing vs code diff diagonal-fill. very clean and pretty, only limitation is it's locked to 45 degrees. */
    --fc: var(--color-background);
    --bc: transparent;
    background-image: linear-gradient(-45deg, var(--fc) 0%, var(--fc) 12.5%, var(--bc) 12.5%, var(--bc) 50%, var(--fc) 50%, var(--fc) 62.5%, var(--bc) 62.5%, var(--bc) 100%);
    background-size: 8px 8px;

    /* when there's no text */
    min-height: 24px;
}

.songListSongTable .tr.item.type_divider.nohatch {
    background: none;
}

.songListSongTable .tr.item.type_divider .td.comment {
    display: flex;
}

.songListSongTable .tr.item.type_divider .dividerCommentText {
    padding-left: 20px;
    color: var(--color-foreground);

    /* helps text stand out against the hatch background*/
    --dist: 4px;
    text-shadow: 0 0 var(--dist) var(--color-background), 0 0 var(--dist) var(--color-background), 0 0 var(--dist) var(--color-background);
}

.songListSongTable .td.icon {
    color: #0005;
}

.songListSongTable .td.icon svg {
    height: 20px;
}

.songListSongTable .td.songName,
.songListSongTable .th.songName {
    width: 340px;
    position: relative;
    display: flex;
    justify-content: flex-start;
    font-weight: bold;
    color: var(--song-hash-color);
    padding: 2px 0;
}

.songTagIndicatorContainer {
    position: absolute;
    right: 0;
    /* top: 0;  <-- dont set to center vertically*/
    display: flex;
    gap: 4px;
}

.songTagIndicator {
    padding: 1px 3px;
    border-radius: 4px;
    user-select: none;
    opacity: 50%;
    display: flex;
    align-items: center;

    font-family: var(--ff-mono);
    font-size: 14px;
    font-weight: normal;

    --color-background: #ddd;
    --color-foreground: #666;

    background-color: var(--color-background) !important;
    color: var(--color-foreground) !important;
    /* border: 1px var(--color-border-style) var(--color-foreground); */
}

.songTagIndicator:hover {
    opacity: 100%;
}


.songTagIndicator.bare {
    padding: 0;
    background-color: transparent;
    border-radius: 0;
    opacity: 100%;
    user-select: none;
    font-size: 16px;
}


.songListSongTable .td.songName {
    font-size: 20px;
    letter-spacing: -.3px;
    overflow: hidden;
}

.songListSongTable .td.songName a {
    color: var(--song-hash-color);
}

.songListSongTable .td.songName .divider {
    font-family: var(--ff-mono);
    color: #888;
    /* for vertically-centering color swatch */
    display: flex;
}

.songListSongTable .td.songName input {
    color: var(--song-hash-color);

}

.songListSongTable .td.songName .cmdbSimpleInput {
    font-weight: bold;
    padding: 0;
}

.songListSongTable .td.length,
.songListSongTable .th.length {
    width: 60px;
}

.songListSongTable .td.length {
    font-family: var(--ff-mono);
    justify-content: flex-end;
    color: var(--deemphasized-color);
    padding-right: 8px;
}



.songListSongTable .td.runningLength,
.songListSongTable .th.runningLength {
    width: 60px;
}


.songListSongTable .td.runningLength {
    font-family: var(--ff-mono);
    color: var(--deemphasized-color);
    font-size: 14px;
    justify-content: flex-end;
}




.songListSongTable .td.tempo,
.songListSongTable .th.tempo {
    width: 50px;
    /* background-color: #0004; */
}

.songListSongTable .td.tempo {
    font-family: var(--ff-mono);
    color: blue;
}

.songListSongTable .td.comment,
.songListSongTable .th.comment {
    display: flex;
    flex-grow: 1;
}


.songListSongTable .dividerButtonGroup {
    display: flex;
    align-items: center;
}

.songListSongTable .dividerButton {
    background-color: white;
    border-radius: 50%;
    border: 1px dotted black;
    padding: 2px;
    display: flex;
}

.songListSongTable .dividerButton+.dividerButton {
    margin-left: 8px;
}

.dividerIsInterruptionButton.notInteractable.isInterruption {
    border: 1px dotted #0004;
}

.dividerIsInterruptionButton.notInteractable.isInterruption svg {
    opacity: 50%;
}

/* for viewing only, don't show these divider indicators; too noisy.*/
.dividerButton.notInteractable {
    visibility: hidden;
}

.songListSongTable .td.comment svg {
    /* mui icons in the divider row */
    fill: var(--color-foreground);
    --size: 22px;
    height: var(--size);
    width: var(--size);
}

.songListSongTable .th.comment {
    /* left-justify */
    justify-content: space-between;
}

.freeButton.CMSmallButton.DotMenu {
    color: black;
    font-style: normal;
    /* font-weight: bold; */
    font-size: 20px;
    /* background-color: #ccc; */
    border-radius: 4px;
    margin: 2px;
    padding: 0 15px;
}

.freeButton.CMSmallButton.DotMenu:hover {
    background-color: #bbb;
}


.songListSongTable .td.comment {
    font-style: italic;
    color: #0008;
    /* allow tag lists to wrap*/
    white-space: wrap;
    flex-wrap: wrap;
    /* so long as the comment is nowrap, then this works fine to keep things on 1 line when possible.*/
    width: min-content;
}

.songListSongTable .td.comment div.comment {
    /* when no tags, the comment container will fill the cell.*/
    flex-grow: 1;

    /* allow dupe warning indicator to be on same line*/
    display: flex;
}

.songListSongTable .warnIndicator {
    font-style: normal;
    background-color: var(--song-hash-color);
    color: #f99;
    padding: 0 5px;
    display: flex;
    align-items: center;
    border-radius: 6px;
    margin: 0 3px;
    /* border: 2px solid #f80; */
    white-space: nowrap;
    font-weight: bold;
    /* font-size: 12px; */
}


.songListSongTable .td.comment .CMChipContainer {
    flex-wrap: wrap;
}

.songListSongTable .td.comment input::placeholder,
.songListSongTable .td.comment textarea::placeholder {
    color: #0004;
    font-size: 12px;
    text-shadow: none;
    font-style: italic;
}

/* .songListSongTable .td.comment:hover input::placeholder,
.songListSongTable .td.comment:hover textarea::placeholder {
    color: #000;
    font-size: 12px;
} */


.EventSongListValue {
    /*allow the header to touch edges*/
    padding: 0;
    border-radius: 5px;
    /*fea*/
    border: 2px solid #eee;
    /* border-left: 8px solid #ccc; */
    margin: 0;
    margin-bottom: 19px;
}

.EventSongListValue:hover {
    /* border-left: 8px solid #88f; */
    border-color: #88f;
}

/* in song list editor dialog, don't display the left border.*/
.MuiDialogContent-root .EventSongListValue {
    border-left: unset;
}

.EventSongListValue>.header {
    background-color: #eee;
    display: flex;
    align-items: center;
    padding: 0 15px;
    justify-content: space-between;
}


/* make this list as wide as possible */
.EventSongListValue>.content {
    padding: 0px;
}

/* ... and put the padding in the markdown instead of content div */
.EventSongListValue>.content>.markdown {
    padding: 10px;
}


/* autocomplete dropdown for songs */
li.songDropdownOption {
    white-space: nowrap;
}

/* ----------------------------------------------------------------------------- */

.songListSongTable .tr.item.type_divider.style_Title .dividerCommentText {
    font-family: var(--ff-mono);
    text-transform: uppercase;
    font-size: 26px;
    font-weight: bold;
    font-style: normal;
    padding: 0;
    padding-bottom: 6px;
    /* white-space: nowrap; */
    /* max-width: 450px; */
}

.songListSongTable .tr.item.type_divider.style_Title .dividerCommentText input {
    text-transform: uppercase;
}

.songListSongTable .tr.item.type_divider.style_BreakBefore {
    /* border-top: 4px solid var(--color-foreground); */
    margin-top: 16px;
}

.songListSongTable .tr.item.type_divider.style_BreakAfter {
    /* border-bottom: 4px solid var(--color-foreground); */
    margin-bottom: 6px;
}

.songListSongTable .tr.item.type_divider.style_Minimal.style_BreakBefore {
    /* border-top: 2px dashed var(--color-foreground); */
    margin-top: 4px;
}

.songListSongTable .tr.item.type_divider.style_Minimal.style_BreakAfter {
    /* border-bottom: 2px dashed var(--color-foreground); */
    margin-bottom: 6px;
}

.songListSongTable .tr.item.type_divider .dividerCommentContainer {
    position: relative;
}

.songListSongTable .tr.item.type_divider {
    --divider-height: 3px;
    --divider-style: solid;
}

.songListSongTable .tr.item.type_divider.style_BreakBefore .dividerBreakDiv,
.songListSongTable .tr.item.type_divider.style_BreakAfter .dividerBreakDiv,
.songListSongTable .tr.item.type_divider.style_Break .dividerBreakDiv {
    /* used to be a line in the middle but it's a very hacky way to acheive a kinda ugly effect. find something else (someday)*/
}


.songListSongTable .tr.item.type_divider.style_BreakBefore .dividerBreakDiv {
    top: 0;
}

.songListSongTable .tr.item.type_divider.style_BreakAfter .dividerBreakDiv {
    bottom: 0;
}

.songListSongTable .tr.item.type_divider .markdown .extraContainerDiv {
    padding: 0 10px;
}

/* we need to deal with z-index to make sure "break" text goes above its divider */
.songListSongTable .tr.item.type_divider.style_Break .dividerBreakDiv {
    z-index: 0;
}

.songListSongTable .tr.item.type_divider.style_Break .markdown .extraContainerDiv {
    background-color: white;
}


/* 
.songListSongTable .tr.item.type_divider.style_Break .dividerBreakDiv {
    border-top: 3px solid var(--color-foreground);
    height: 0;
} */

/* 
.songListSongTable .tr.item.type_divider.style_Break .dividerBreakDiv.before {
    width: 40px;
    flex-grow: 0;
    margin-right: 30px;
} */

.songListSongTable .tr.item.type_divider.style_Break .dividerCommentText {
    margin: 0 15px;
    padding-left: 0px;
    flex-grow: 1;
    z-index: 1;
}

.songListSongTable .tr.item.type_divider .dividerCommentText input,
.songListSongTable .tr.item.type_divider textarea.dividerCommentText {
    width: 400px;
}

/* 
.songListSongTable .tr.item.type_divider.style_Break .dividerBreakDiv.after {
    min-width: 50px;
    margin-right: 30px;
    margin-left: 30px;
} */

.songListSongTable .tr.item.type_divider .dividerCommentContainer {
    display: flex;
    align-items: center;
}

.songListSongTable .tr.item.type_divider.nohatch .dividerCommentText {
    text-shadow: none;
}

.songListSongTable .tr.item.type_divider.style_Minimal .dividerCommentText {
    font-size: 14px;
    /* opacity: 50%; */
}

.songListSongTable .tr.item.type_divider.style_Minimal {
    --divider-height: 2px;
    --divider-style: dashed;
}

/* 
.songListSongTable .tr.item.type_divider.style_Minimal.style_Break .dividerBreakDiv {
    border-top: 2px dashed var(--color-background);
    height: 0;
} */


.songListSongTable .audioPreviewGatewayContainer {
    width: 28px;
}

.songListSongTable .audioPreviewGatewayButton svg {
    fill: #aaa;
}

/* Animated playing indicator */
.songListSongTable .audioPreviewGatewayButton.isPlaying {
    position: relative;
}

.songListSongTable .playingIndicatorOuter {
    position: relative;
    display: inline-block;
}

.songListSongTable .playingIndicatorGlow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: radial-gradient(circle, rgba(0, 136, 255, 0.3) 0%, rgba(0, 136, 255, 0.1) 50%, transparent 70%);
    transform: translate(-50%, -50%);
    pointer-events: none;
}

.songListSongTable .playingIndicatorSpinner {
    position: relative;
    z-index: 1;
    transform-origin: center center;
}

.songListSongTable .playingIndicatorSpinnerAnim {
    animation: playingRotate 3s linear infinite;
}

.songListSongTable .playingIndicatorSpinner svg {
    fill: #0088ff;
    filter: drop-shadow(0 0 3px rgba(0, 136, 255, 0.5));
    display: block;
}

@keyframes playingRotate {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}