.EventSongListValueEditor .columnName-name input,
.EventSongListValueViewer .columnName-name {
    font-size: 24px;
    font-weight: bold;
    text-transform: uppercase;
    margin-right: 20px;
    display: flex;
    align-items: center;
}


.EventSongListValueViewer .dragHandleIcon {
    padding: 6px;
    padding-right: 12px;
    opacity: 30%;
    font-size: 15px;
}

.EventSongListList.saving {
    opacity: 30%;
    cursor: wait;
}

.addNewSongListButton {
    margin: 14px;
}

.EventSongListValue .stats {
    margin: 2px;
}

.songListSongTable {
    /* width: 1000px; */
    /* for small windows this makes it smaller so it doesn't overflow the screen. */
    /* max-width: 100%; */
    border-bottom: 1px solid #ccc;
}


.songListSongTable .tr {
    display: flex;
    /*
     interacts with the max-width:100% of the table to allow the comments field to wrap to the next line
     actually this is very ugly; cannot make wrapping cells to look nice. better to make cells wrap internally like the tag list
    */
    /* flex-wrap: wrap; */
}

.songListSongTable .tbody .tr {
    /* makes icons and things center vertically within cells; looks cleaner */
    align-items: center;
    /* songs get a unique color to search dupes */
    --song-hash-color: black;
}


.songListSongTable .td,
.songListSongTable .th {
    display: flex;
    justify-content: center;
    white-space: nowrap;
    margin: 2px 0;
    align-items: center;
    flex-shrink: 0;
}

.songListSongTable .th {
    font-weight: bold;
    background-color: #0001;
    color: #0005;
    border-bottom: 1px solid #0003;
    /* font-style: italic; */
}

.songListSongTable .td:hover {
    background-color: #8881;
}

.songListSongTable .td.dragHandle,
.songListSongTable .th.dragHandle {
    user-select: none;
    width: 30px;
}

.songListSongTable .td.songIndex,
.songListSongTable .th.songIndex {
    width: 44px;
}

.songListSongTable .th.songIndex:hover {
    /* background-color: var(--general-interactable-bgcolor); */
    color: var(--general-interactable-bgcolor);
}

.songListSongTable .td.songIndex {
    font-family: monospace;
}

.songListSongTable .td.icon,
.songListSongTable .th.icon {
    width: 30px;
}

.songListSongTable .tr.invalidItem .td.songIndex,
.songListSongTable .tr.invalidItem .td.dragHandle,
.songListSongTable .tr.invalidItem .td.icon {
    color: #0002;
}

.songListSongTable .tr.item {
    border-bottom: 1px dotted #0002;
}

.songListSongTable .tr.item.type_divider {
    /* border-bottom: 1px solid #0003;
    margin-bottom: 3px; */
    /* background-color: #0001; */
    /* slope of 4/5 is nice and pretty, close enough to 45 deg. in fact 45 deg looks kinda terrible because it tries to be perfect but doesn't render so.*/
    /* background-image: repeating-linear-gradient(-38.66deg, #0001 0 1.5px, transparent 1.5px 7.5px); */

    /* mimicing vs code diff diagonal-fill. very clean and pretty, only limitation is it's locked to 45 degrees. */
    --fc: var(--color-background);
    /* #0001;*/
    --bc: transparent;
    background-image: linear-gradient(-45deg, var(--fc) 0%, var(--fc) 12.5%, var(--bc) 12.5%, var(--bc) 50%, var(--fc) 50%, var(--fc) 62.5%, var(--bc) 62.5%, var(--bc) 100%);
    background-size: 8px 8px;
}

.songListSongTable .tr.item.type_divider .td.comment {
    display: flex;
}

.songListSongTable .tr.item.type_divider .dividerComment,
.songListSongTable .tr.item.type_divider .dividerComment input {
    padding-left: 20px;
    color: var(--color-foreground);
    /* background-color: var(--color-background); */
    /* opacity: 50%; */

    /* helps text stand out against the hatch background*/
    --dist: 4px;
    text-shadow: 0 0 var(--dist) var(--color-background), 0 0 var(--dist) var(--color-background), 0 0 var(--dist) var(--color-background);
}

.songListSongTable .td.icon {
    color: #0005;
}

.songListSongTable .td.icon svg {
    height: 20px;
}

.songListSongTable .td.songName,
.songListSongTable .th.songName {
    width: 220px;
    display: flex;
    justify-content: flex-start;
    font-weight: bold;
    color: var(--song-hash-color);
    letter-spacing: -.3px;
    overflow: hidden;
}

.songListSongTable .td.songName .divider {
    font-family: monospace;
    color: #888;
    /* for vertically-centering color swatch */
    display: flex;
}

.songListSongTable .td.songName input {
    color: var(--song-hash-color);

}

.songListSongTable .td.songName .cmdbSimpleInput {
    font-weight: bold;
    padding: 0;
}

.songListSongTable .td.length,
.songListSongTable .th.length {
    width: 60px;
}

.songListSongTable .td.length {
    font-family: monospace;
    justify-content: flex-end;
}



.songListSongTable .td.runningLength,
.songListSongTable .th.runningLength {
    width: 60px;
}

.songListSongTable .td.runningLength {
    font-family: monospace;
    color: #0004;
    font-size: 14px;
    justify-content: flex-end;
}




.songListSongTable .td.tempo,
.songListSongTable .th.tempo {
    width: 104px;
}

.songListSongTable .td.tempo {
    font-family: monospace;
    justify-content: space-between;
    color: blue;
}

.songListSongTable .td.comment,
.songListSongTable .th.comment {
    display: flex;
    flex-grow: 1;
}

.songListSongTable .td.comment svg {
    /* mui icons in the divider row */
    fill: var(--color-foreground);
}

.songListSongTable .th.comment {
    /* left-justify */
    justify-content: space-between;
}

.freeButton.CMSmallButton.DotMenu {
    color: black;
    font-style: normal;
    font-weight: bold;
    font-size: 20px;
    /* background-color: #ccc; */
    border-radius: 4px;
    margin: 2px;
    padding: 0 15px;
}

.freeButton.CMSmallButton.DotMenu:hover {
    background-color: #bbb;
}


.songListSongTable .td.comment {
    font-style: italic;
    color: #0008;
    /* allow tag lists to wrap*/
    white-space: wrap;
    flex-wrap: wrap;
    /* so long as the comment is nowrap, then this works fine to keep things on 1 line when possible.*/
    width: min-content;
}

.songListSongTable .td.comment div.comment {
    /* when no tags, the comment container will fill the cell.*/
    flex-grow: 1;

    /* allow dupe warning indicator to be on same line*/
    display: flex;
}

.songListSongTable .warnIndicator {
    font-style: normal;
    background-color: var(--song-hash-color);
    color: #f99;
    padding: 0 5px;
    display: flex;
    align-items: center;
    border-radius: 6px;
    margin: 0 3px;
    /* border: 2px solid #f80; */
    white-space: nowrap;
    font-weight: bold;
    /* font-size: 12px; */
}


.songListSongTable .td.comment .CMChipContainer {
    flex-wrap: wrap;
}

.songListSongTable .td.comment .cmdbSimpleInput {
    width: 100%;
}

.songListSongTable .td.comment input::placeholder {
    color: #0005;
    font-size: 12px;
}

.songListSongTable .td.comment:hover input::placeholder {
    color: #000;
    font-size: 12px;
}


.EventSongListValue {
    /*allow the header to touch edges*/
    padding: 0;
    border-radius: 8px;
    /*fea*/
    border: 2px solid #eee;
    border-left: 8px solid #ccc;
    margin: 0;
    margin-bottom: 19px;
}

.EventSongListValue:hover {
    border-left: 8px solid #88f;
}

/* in song list editor dialog, don't display the left border.*/
.MuiDialogContent-root .EventSongListValue {
    border-left: unset;
}

.EventSongListValue>.header {
    background-color: #eee;
    display: flex;
    align-items: center;
    padding: 0 15px;
}

.EventSongListValue>.content {
    padding: 10px;
}


/* autocomplete dropdown for songs */
li.songDropdownOption {
    white-space: nowrap;
}